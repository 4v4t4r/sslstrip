[DEFAULT]
; HTML5 AppCache poisioning attack
; see http://blog.kotowicz.net/2010/12/squid-imposter-phishing-websites.html for description of the attack.
enabled=True
;enable_only_in_useragents=Chrome|Firefox
tamper_class=sslstrip.AppCachePoison
templates_path=app_cache_poison/templates

; when visiting first url matching following expression we will embed iframes with all tamper URLs
;(to poison the cache for all of them all at once)
mass_poison_url_match=http://.*
; it's only useful to mass poison chrome as it supports iframe sandbox preventing framebusting
mass_poison_useragent_match=Chrome

[test]
; any //example.com URL redirects to iana and will display our spoofed content
tamper_url=http://www.iana.org/domains/example/
manifest_url=http://www.iana.org/robots.txt ;use existing static URL that is rarely seen by the browser user, but exists on the server (no 404!)
templates=test ; which templates to use for spoofing content?

; use absolute URLs - system tracks 30x redirects, so only put the first URL that starts the redirection loop here
[gmail]
tamper_url=http://gmail.com/
manifest_url=http://mail.google.com/mail/help/intl/en/terms.html
templates=default ; could be omitted

[facebook]
tamper_url=http://www.facebook.com/
manifest_url=http://www.facebook.com/robots.txt
templates=facebook

; for websites that redirect to different domains things are a bit tricky
[twitter]
;we need to cover 2 instances here: www. redirects to twitter.com
tamper_url=http://www.twitter.com/
; manifest has to be of last domain in redirect loop
manifest_url=http://twitter.com/robots.txt

[twitter2]
; 2nd instance
tamper_url=http://twitter.com/
manifest_url=http://twitter.com/robots.txt